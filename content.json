{"meta":{"title":"王心淳的博客","subtitle":"记录学习历程的点点滴滴","description":"王心淳的博客","author":"XinChun","url":"http://xinchun.wang","root":"/"},"pages":[],"posts":[{"title":"信息学","slug":"info-1031","date":"2021-10-31T00:28:24.000Z","updated":"2021-11-02T16:26:15.332Z","comments":true,"path":"20211031/a88d39e4a862/","link":"","permalink":"http://xinchun.wang/20211031/a88d39e4a862/","excerpt":"","text":"","categories":[{"name":"信息学","slug":"信息学","permalink":"http://xinchun.wang/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6/"}],"tags":[{"name":"信息学","slug":"信息学","permalink":"http://xinchun.wang/tags/%E4%BF%A1%E6%81%AF%E5%AD%A6/"}]},{"title":"FLS SDF2021 培训02期 第四课","slug":"info-0812","date":"2021-08-13T11:19:23.000Z","updated":"2021-11-02T16:26:15.332Z","comments":true,"path":"20210813/c7369eedb063/","link":"","permalink":"http://xinchun.wang/20210813/c7369eedb063/","excerpt":"","text":"MathJax = { tex: { inlineMath: [['$', '$'], ['\\\\(', '\\\\)']] }, svg: { fontCache: 'global' } }; When $a \\ne 0$, jgjgjg34☁️4$$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$ 问题 A: N阶乘When $a \\ne 0$, 45267353786457835$$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$ 1234567891011121314151617181920212223242526272829303132333435363738394041424344//题目描述阶乘是基斯顿·卡曼（Christian Kramp，1760～1826）于 1808 年发明的运算符号，是数学术语。一个正整数的阶乘（英语：factorial）是所有小于及等于该数的正整数的积，并且有0的阶乘为1。自然数n的阶乘写作n!。1808年，基斯顿·卡曼引进这个表示法。亦即n!=1×2×3×...×n。阶乘亦可以递归方式定义：0!=1，n!=(n-1)!×n。请编写一个程序，输入一个非负整数n（0&lt;=n&lt;=20)，计算N!。//输入输入n&#123;% raw %&#125;&lt;p&gt;When $a \\ne 0$, $$x = &#123;-b \\pm \\sqrt&#123;b^2-4ac&#125; \\over 2a&#125;.$$&lt;/p&gt;&#123;% endraw %&#125;//输出输出计算结果//样例输入3//样例输出6//提示//提交#include &lt;iostream&gt;using namespace std;long long j(int n) //函数名用函数功能来命名:阶乘(factorial)&#123; if(n==1) return 1; return (n*j(n-1));&#125;int main()&#123; int n; cin&gt;&gt;n; cout&lt;&lt;j(n)&lt;&lt;endl; return 0;&#125; 问题 B: 走楼梯12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576//题目描述楼梯有 N 级台阶，上楼可以一步上一阶， 也可以一步上二阶。 编程序，计算共有多少种不同走法?//输入输入一个整数，表示n（n&lt;=50)。//输出输出一个整数，表示走法的个数。保证答案不超2^63-1.//样例输入3//样例输出3//提示输入输出均在64位整数范围内。//提交#include &lt;iostream&gt;using namespace std;long long x[51]=&#123;0&#125;;long long zlt(int n)&#123; if(n==1) // 无效分支 return 1; if(x[n]!=0) // 已包含 n==1 的情况 return x[n]; return x[n]=zlt(n-1)+zlt(n-2); // 该语句容易引起误解&#125;int main()&#123; int n; cin&gt;&gt;n; x[1]=1; x[2]=2; cout&lt;&lt;zlt(n)&lt;&lt;endl; return 0;&#125;//错误答案1#include &lt;iostream&gt;using namespace std;long long zlt(int n)&#123; if(n==1) return 1; if(n==2) return 2; return zlt(n-1)+zlt(n-2);&#125;int main()&#123; int n; cin&lt;&lt;n; //编译错误 cout&lt;&lt;zlt(n)&lt;&lt;endl; return 0;&#125;//错误答案2#include &lt;iostream&gt;using namespace std;long long x[51]=&#123;0&#125;;long long zlt(int n)&#123; if(n==1) //无效分支 return 1; if(x[n]!=0) //未处理边界 x[1], x[2] return x[n]; return x[n]=zlt(n-1)+zlt(n-2);&#125;int main()&#123; int n; cin&gt;&gt;n; cout&lt;&lt;zlt(n)&lt;&lt;endl; return 0;&#125; 问题 C: 阿克曼函数（递归）$$c(u)=\\begin{cases} \\sqrt\\frac{1}{N}，u=0\\ \\sqrt\\frac{2}{N}， u\\neq0\\end{cases} $$ $$sqrt{3x-1}+(1+x)^2$$ $$ evidence_{i}=\\sum_{j}W_{ij}x_{j}+b_{i} $$ $$begin{array}{c} nabla times vec{mathbf{B}} -, frac1c, frac{partialvec{mathbf{E}}}{partial t} &amp;= frac{4pi}{c}vec{mathbf{j}} nabla cdot vec{mathbf{E}} &amp; = 4 pi rho \\ nabla times vec{mathbf{E}}, +, frac1c, frac{partialvec{mathbf{B}}}{partial t} &amp; = vec{mathbf{0}} \\ nabla cdot vec{mathbf{B}} &amp; = 0 end{array}$$ 123456789101112131415161718//题目描述阿克曼（ Ackmann） 函数 A(x， y) 中， x， y 定义域是非负整数， 函数值定义为：c(u)=\\begin&#123;cases&#125; \\sqrt\\frac&#123;1&#125;&#123;N&#125;，u=0\\\\ \\sqrt\\frac&#123;2&#125;&#123;N&#125;， u\\neq0\\end&#123;cases&#125; 写出计算Ack(m, n)的递归算法程序。//输入输入两个数，表示m和n。 两个数均不超过10。//输出输出一个数，表示结果（在longint范围内 ）//样例输入1 1//样例输出3//提示//提交 问题 D1// 问题 E1// 问题 F1//","categories":[{"name":"学霸秘籍","slug":"学霸秘籍","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/"},{"name":"信息学","slug":"学霸秘籍/信息学","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/%E4%BF%A1%E6%81%AF%E5%AD%A6/"}],"tags":[{"name":"信息学","slug":"信息学","permalink":"http://xinchun.wang/tags/%E4%BF%A1%E6%81%AF%E5%AD%A6/"}]},{"title":"FLS SDF2021 培训02期 第三课","slug":"info-0811","date":"2021-08-11T23:59:59.000Z","updated":"2021-11-02T16:26:15.332Z","comments":true,"path":"20210811/7c70b62f1c8e/","link":"","permalink":"http://xinchun.wang/20210811/7c70b62f1c8e/","excerpt":"","text":"上一节课是复习课, 今天信息课正式步入正轨。主要内容： 老师讲了。。。。。 老师讲了。。。。 老师讲了。。。 老师讲了。。。 问题 A: 满足条件三个三位数12345678910111213141516171819202122232425262728293031//题目描述 将1—9这9个数字分成三组（每个数字只能使用一次），分别组成三个三位数的值构成1：2：3的比例，试求出所有满足条件的三个三位数。例如以下三个三位数就是其中一个解。 1 9 2 3 8 4 5 7 6 显然满足条件的三个三位数，有多组解。编写一个程序，输入一个整数K，输出按第一个三位数从小到大顺序中第K个解。//输入 输入仅有一个整数K。//输出 输出仅有一行，从小到大的三个三位数，相邻两个数之间有一个空格。 //样例输入1//样例输出192 384 576//提示//提交#include &lt;iostream&gt;using namespace std;int main()&#123; return 0;&#125; 问题 B: 走楼梯123456789101112131415161718192021222324//题目描述楼梯有 N 级台阶，上楼可以一步上一阶， 也可以一步上二阶。 编程序，计算共有多少种不同走法?//输入输入一个整数，表示n（n&lt;=50)。//输出输出一个整数，表示走法的个数。保证答案不超2^63-1.//样例输入3//样例输出3//提示输入输出均在64位整数范围内。//提交#include &lt;iostream&gt;using namespace std;int main()&#123; return 0;&#125; 问题 C: 不同的放置方法1234567891011121314151617181920212223//题目描述N个同样的袋子里放M个同样的球，允许有的袋子空着不放，问共有多少种不同的放置方法。例如N=3，M=7时，答案为8。在这里认为（5,1,1），（1,5,1）就同一种。//输入输入仅有一行，包含两个整数N,M。(1&lt;=N,M&lt;=1000)//输出输出仅有一个整数，表示答案mod 100000007。//样例输入3 7 //样例输出8//提示//提交#include &lt;iostream&gt;using namespace std;int main()&#123; return 0;&#125; 问题 D: 猴子吃桃12345678910111213141516171819202122232425//题目描述 海滩上有一堆桃子，N只猴子来分。第一只猴子把这堆桃子平均分为N份，多了一个，这只猴子把多的一个扔入海中，拿走了一份。第二只猴子接着把剩下的桃子平均分成N份，又多了一个，它同样把多的一个扔入海中，拿走了一份。第三、第四、……，第N只猴子仍是最终剩下的桃子分成N份，扔掉多了的一个，并拿走一份。 编写程序，输入猴子的数量N，输出海滩上最少的桃子数，使得每只猴子都可吃到桃子。//输入一组整数，最后一个整数是0，表示输入结束，其余整数均大于1。//输出对输入的每个整数N，输出当猴子数量为N时海滩上最少的桃子数。所输出的每个整数占一行。结果保证在int型范围内。//样例输入2 4 0//样例输出7253//提示//提交#include &lt;iostream&gt;using namespace std;int main()&#123; return 0;&#125; 问题 E: 平面分割1234567891011121314151617181920212223//题目描述同一平面内有 n（ n≤500） 条直线，已知其中 p（ p≥2） 条直线相交于同一点，则这 n 条直线最多能将 平面分割成多少个不同的区域？//输入两个整数 n（ n≤500）和 p（ 2≤p≤n）。//输出一个正整数， 代表最多分割成的区域数目。//样例输入12 5//样例输出73//提示//提交#include &lt;iostream&gt;using namespace std;int main()&#123; return 0;&#125;","categories":[{"name":"学霸秘籍","slug":"学霸秘籍","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/"},{"name":"信息学","slug":"学霸秘籍/信息学","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/%E4%BF%A1%E6%81%AF%E5%AD%A6/"}],"tags":[{"name":"信息学","slug":"信息学","permalink":"http://xinchun.wang/tags/%E4%BF%A1%E6%81%AF%E5%AD%A6/"}]},{"title":"FLS SDF2021 培训02期 第二课","slug":"info-0810","date":"2021-08-10T23:59:59.000Z","updated":"2021-11-02T16:26:15.332Z","comments":true,"path":"20210810/e3ccf7b2ca3b/","link":"","permalink":"http://xinchun.wang/20210810/e3ccf7b2ca3b/","excerpt":"","text":"上一节课是复习课, 今天信息课正式步入正轨。主要内容： 老师讲了。。。。。 老师讲了。。。。 老师讲了。。。 老师讲了。。。 Problem-A 2-n之间的所有质数123456789101112131415161718192021222324252627282930313233343536373839404142434445464748//题目描述输入一个整数n（n&lt;=10000)，输出n范围内所有的质数，每5个一行。//输入一个整数n(n&lt;=10000)//输出输出2-n之间所有的质数，每行5个质数，每个数后面有一个空格。//样例输入15//样例输出2 3 5 7 1113 //提示格式说明：一行如果满5个，则这一行结束后有回车，且这一行的最后一个数后面没有空格。//提交#include &lt;iostream&gt;using namespace std;int n,sam=0;bool g(int n) // 建议函数取名有意义, 如 bool isPrime(int n);&#123; for(int i=2;i*i&lt;=n;i++) &#123; if(n%i==0) return false; &#125; return true;&#125;int main()&#123; cin&gt;&gt;n; for(int i=2;i&lt;=n;i++) // 建议使用花括号, 使代码更清晰 if(g(i)) &#123; cout&lt;&lt;i; sam++; if(sam==5) &#123; cout&lt;&lt;endl; sam=0; // 第一次提交忘记 sam 复位为0 &#125; else cout&lt;&lt;&quot; &quot;; &#125; return 0;&#125; Problem-B 哥德巴赫猜想1234567891011121314151617181920212223242526272829303132333435363738394041//题目描述著名的数学家哥德巴赫说：任意不小于6的偶数必定可分解成两个素数之和，例如10＝3+7。请编写一个程序，对于输入的任意正偶数（不大于100000），将其分解成两个质数的和形式。如果有多种解，输出第一个加数最小的那个解。//输入一个正偶数N（不大于100000）。//输出两个质数，它的和为N。//样例输入10//样例输出3 7//提示//提交#include &lt;iostream&gt;using namespace std;int n;bool g(int n) // 建议函数取名有意义&#123; for(int i=2;i*i&lt;=n;i++) &#123; if(n%i==0) return false; &#125; return true;&#125;int main()&#123; cin&gt;&gt;n; for(int i=2;i&lt;=n;i++) // 可以优化为, 节省一半计算量: for(int i=3;i&lt;=n;i=i+2) if(g(i)&amp;&amp;g(n-i)) &#123; cout&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;n-i&lt;&lt;endl; break; &#125; return 0;&#125; Problem-C 3n+1问题12345678910111213141516171819202122232425262728293031323334353637383940414243444546//题目描述考虑如下序列生成算法：从整数n开始，如果n是偶数，把它除以2；如果n是奇数，把它乘3加1。用新得到的值重复上述步骤，直到n=1时停止。例如，n=22时该算法生成的序列是：22，11，34，17，52，26，13，40，20，10，5 ，16，8，4，2，1。人们猜想对于任意整数n，该算法总能终止于n=1。这个猜想对于至少1000000内的整数都是正确的。对于从给定的n，该序列的元素（包括1）个数被称为n的循环节长度。在上述例子中，22的循环节节长度为16。输入两个数i和j，你的任务是计算i到j（包含i和j）之间的整数中，循环节长度的最大值。//输入输入只有一行，包含两个整数i和j。所有整数大于0，小于1000000。//输出输出只有一行，且仅有一个整数，为i到j之间整数中最大循环节长度。//样例输入1 10//样例输出20//提示//提交#include &lt;iostream&gt;using namespace std;int i,j,sam,m=0;void jg(int n) // 建议函数取名有意义&#123; sam=1; while(n!=1) &#123; if(n%2==0) n=n/2; else n=n*3+1; sam++; &#125; if(sam&gt;m) m=sam;&#125;int main()&#123; cin&gt;&gt;i&gt;&gt;j; for(int k=i;k&lt;=j;k++) jg(k); cout&lt;&lt;m&lt;&lt;endl; return 0;&#125; Problem-D 亲密数对123456789101112131415161718192021222324252627282930//题目描述亲密数是一对的，如果整数A的全部真约数（包括1，不包括A本身）之和等于另一个数B；且整数B的全部真约数（包括1，不包括B本身）之和等于A，则将整数A和B称为一对亲密数。 比如220和284，220的真约数1、2、4、5、10、11、20、22、44、55、110之和等于284，284的真约数1、2、4、71、142之和等于220。 编写一个程序求N（1&lt;＝N&lt;=100000)以内的全部亲密数对。 //输入整数N。//输出输出N以内的全部亲密数对，每行一对，小的数在前，大的数在后，两数之间仅有一个空格。//样例输入3000//样例输出220 2841184 12102620 2924//提示//提交#include &lt;iostream&gt;using namespace std;int main()&#123; // TODO return 0;&#125; Problem-E 孪生素数12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273//题目描述在质数的大家庭中，大小之差不超过2的两个质数称它俩为一对孪生素数，如2和3、3和5、17和19等等。请你统计一下，在不大于自然数N的质数中，孪生素数的对数。//输入只有一行，一个自然数N。(N&lt;=100 0000)。//输出只有一行，一个整数，表示N以内孪生素数的对数。//样例输入20//样例输出5//提示//提交#include &lt;iostream&gt;using namespace std;int n,prime,tmp,sam=0;bool p(int n) // 判断的函数建议命名为: bool isXxx(xxx, xxx);&#123; for(int i=2;i*i&lt;=n;i++) &#123; if(n%i==0) return false; &#125; return true;&#125;int main()&#123; cin&gt;&gt;n; for(int i=2;i&lt;=n-2;i++) // 可优化, p(）函数相对耗时, 尽可能有效调用, 节约时间 &#123; if(p(i)) &#123; prime=i; if(p(prime+1)) sam++; if(p(prime+2)) sam++; &#125; &#125; if(p(n-1)&amp;&amp;p(n)) sam++; /* if(n==3) cout&lt;&lt;1&lt;&lt;endl; else if(n&lt;=4) &#123; cout&lt;&lt;0&lt;&lt;endl; &#125; else &#123; bool pre=false; for(int i=3;i&lt;=n;i=i+2) &#123; if(p(i)) &#123; if(pre) sam++; else pre=true; &#125; else pre=false; &#125; sam++; // 2 and 3 &#125; */ cout&lt;&lt;sam&lt;&lt;endl; return 0;&#125; Problem-F 可逆素数123456789101112131415161718192021222324252627//题目描述求a-b之间所有可逆素数。可逆素数是指：一个素数将其各位数字的顺序倒过来构成的反序数也是素数。例如1009为素数，它的反序数9001也是素数，所以1009是可逆素数。这里我们规定可逆素数比它的反序数小，即1009是可逆素数，而9001不算可逆素数。 //输入两个整数a,b。这里a,b&lt;=10000，且a&lt;=b.//输出输出a到b之间，所有可逆素数，每行一个。//样例输入10 20//样例输出1317//提示//提交#include &lt;iostream&gt;using namespace std;int main()&#123; // TODO return 0;&#125;","categories":[{"name":"学霸秘籍","slug":"学霸秘籍","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/"},{"name":"信息学","slug":"学霸秘籍/信息学","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/%E4%BF%A1%E6%81%AF%E5%AD%A6/"}],"tags":[{"name":"信息学","slug":"信息学","permalink":"http://xinchun.wang/tags/%E4%BF%A1%E6%81%AF%E5%AD%A6/"}]},{"title":"信息学0805","slug":"info-0805","date":"2021-08-05T00:03:22.000Z","updated":"2021-11-02T16:26:15.332Z","comments":true,"path":"20210805/d96bdb2b94f8/","link":"","permalink":"http://xinchun.wang/20210805/d96bdb2b94f8/","excerpt":"","text":"文章自动生成，测试！！！","categories":[{"name":"学霸秘籍","slug":"学霸秘籍","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/"},{"name":"信息学","slug":"学霸秘籍/信息学","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/%E4%BF%A1%E6%81%AF%E5%AD%A6/"}],"tags":[{"name":"信息学","slug":"信息学","permalink":"http://xinchun.wang/tags/%E4%BF%A1%E6%81%AF%E5%AD%A6/"}]},{"title":"地理","slug":"geo-0804","date":"2021-08-04T00:48:21.000Z","updated":"2021-11-02T16:26:15.332Z","comments":true,"path":"20210804/e4c8615d23d5/","link":"","permalink":"http://xinchun.wang/20210804/e4c8615d23d5/","excerpt":"","text":"","categories":[{"name":"学霸秘籍","slug":"学霸秘籍","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/"},{"name":"地理","slug":"学霸秘籍/地理","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/%E5%9C%B0%E7%90%86/"}],"tags":[{"name":"地理","slug":"地理","permalink":"http://xinchun.wang/tags/%E5%9C%B0%E7%90%86/"}]},{"title":"历史","slug":"his-0804","date":"2021-08-04T00:48:06.000Z","updated":"2021-11-02T16:26:15.332Z","comments":true,"path":"20210804/5b7d83718cbe/","link":"","permalink":"http://xinchun.wang/20210804/5b7d83718cbe/","excerpt":"","text":"","categories":[{"name":"学霸秘籍","slug":"学霸秘籍","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/"},{"name":"历史","slug":"学霸秘籍/历史","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/%E5%8E%86%E5%8F%B2/"}],"tags":[{"name":"历史","slug":"历史","permalink":"http://xinchun.wang/tags/%E5%8E%86%E5%8F%B2/"}]},{"title":"化学","slug":"che-0804","date":"2021-08-04T00:44:52.000Z","updated":"2021-11-02T16:26:15.332Z","comments":true,"path":"20210804/9986abf2e3a6/","link":"","permalink":"http://xinchun.wang/20210804/9986abf2e3a6/","excerpt":"","text":"","categories":[{"name":"学霸秘籍","slug":"学霸秘籍","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/"},{"name":"化学","slug":"学霸秘籍/化学","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/%E5%8C%96%E5%AD%A6/"}],"tags":[{"name":"化学","slug":"化学","permalink":"http://xinchun.wang/tags/%E5%8C%96%E5%AD%A6/"}]},{"title":"物理","slug":"phy-0804","date":"2021-08-04T00:44:48.000Z","updated":"2021-11-02T16:26:15.332Z","comments":true,"path":"20210804/ac578ad32f0b/","link":"","permalink":"http://xinchun.wang/20210804/ac578ad32f0b/","excerpt":"","text":"","categories":[{"name":"学霸秘籍","slug":"学霸秘籍","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/"},{"name":"物理","slug":"学霸秘籍/物理","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/%E7%89%A9%E7%90%86/"}],"tags":[{"name":"物理","slug":"物理","permalink":"http://xinchun.wang/tags/%E7%89%A9%E7%90%86/"}]},{"title":"英语","slug":"eng-0804","date":"2021-08-04T00:29:34.000Z","updated":"2021-11-02T16:26:15.332Z","comments":true,"path":"20210804/0093f0c943c4/","link":"","permalink":"http://xinchun.wang/20210804/0093f0c943c4/","excerpt":"","text":"","categories":[{"name":"学霸秘籍","slug":"学霸秘籍","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/"},{"name":"英语","slug":"学霸秘籍/英语","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/%E8%8B%B1%E8%AF%AD/"}],"tags":[{"name":"英语","slug":"英语","permalink":"http://xinchun.wang/tags/%E8%8B%B1%E8%AF%AD/"}]},{"title":"信息学","slug":"info-0804","date":"2021-08-04T00:28:24.000Z","updated":"2021-11-02T16:26:15.332Z","comments":true,"path":"20210804/0a847f27672b/","link":"","permalink":"http://xinchun.wang/20210804/0a847f27672b/","excerpt":"","text":"","categories":[{"name":"信息学","slug":"信息学","permalink":"http://xinchun.wang/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6/"}],"tags":[{"name":"信息学","slug":"信息学","permalink":"http://xinchun.wang/tags/%E4%BF%A1%E6%81%AF%E5%AD%A6/"}]},{"title":"福州时代中学, 我来了","slug":"junior-high-school","date":"2021-08-04T00:24:49.000Z","updated":"2021-11-02T16:26:15.332Z","comments":true,"path":"20210804/0508975c961a/","link":"","permalink":"http://xinchun.wang/20210804/0508975c961a/","excerpt":"","text":"在这个时代, 想要有所成就, 学习是最好的道路。而除了自身的努力, 好的环境可以是学习事半功倍， 所以一个好学校也是学生们希望去的。在报志愿时, 我毫不犹豫地选择了要与三千学子竞争, 只有博阿明人数七分之一的位置的时代中学。幸运的是, 我拿到了录取通知书。 如愿以偿地进入了时代中学, 就像军人终于进入了朝思夜想（PS: 朝思夜暮想）的英雄连队。而兴奋的同时, 又有进入新环境的紧张和不安。 之所以不安是因为在这时代中学, 可谓藏龙卧虎, 不说名列前茅, 就是要排上号, 也要有真本事。 我不是一个学霸, 但我未必不能成为一个学霸, 而成为学霸的最好途径就是跟学霸一起学习, 时代中学无疑是一个好去处。 很幸运在学习之路上遇见你。福州时代中学, 我来了。","categories":[],"tags":[]},{"title":"数学","slug":"math-0804","date":"2021-08-02T00:29:46.000Z","updated":"2021-11-02T16:26:15.332Z","comments":true,"path":"20210802/7268ae4de64f/","link":"","permalink":"http://xinchun.wang/20210802/7268ae4de64f/","excerpt":"","text":"","categories":[{"name":"学霸秘籍","slug":"学霸秘籍","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/"},{"name":"数学","slug":"学霸秘籍/数学","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://xinchun.wang/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"语文","slug":"chs-0804","date":"2021-08-01T00:29:41.000Z","updated":"2021-11-02T16:26:15.332Z","comments":true,"path":"20210801/20399e1ba513/","link":"","permalink":"http://xinchun.wang/20210801/20399e1ba513/","excerpt":"","text":"","categories":[{"name":"学霸秘籍","slug":"学霸秘籍","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/"},{"name":"语文","slug":"学霸秘籍/语文","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/%E8%AF%AD%E6%96%87/"}],"tags":[{"name":"语文","slug":"语文","permalink":"http://xinchun.wang/tags/%E8%AF%AD%E6%96%87/"}]},{"title":"欢迎来到我的博客","slug":"hello-world","date":"2021-07-04T00:24:49.000Z","updated":"2021-11-02T16:26:15.332Z","comments":true,"path":"20210704/5e46ca5b1c75/","link":"","permalink":"http://xinchun.wang/20210704/5e46ca5b1c75/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"信息学","slug":"信息学","permalink":"http://xinchun.wang/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6/"},{"name":"学霸秘籍","slug":"学霸秘籍","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/"},{"name":"信息学","slug":"学霸秘籍/信息学","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/%E4%BF%A1%E6%81%AF%E5%AD%A6/"},{"name":"地理","slug":"学霸秘籍/地理","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/%E5%9C%B0%E7%90%86/"},{"name":"历史","slug":"学霸秘籍/历史","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/%E5%8E%86%E5%8F%B2/"},{"name":"化学","slug":"学霸秘籍/化学","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/%E5%8C%96%E5%AD%A6/"},{"name":"物理","slug":"学霸秘籍/物理","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/%E7%89%A9%E7%90%86/"},{"name":"英语","slug":"学霸秘籍/英语","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/%E8%8B%B1%E8%AF%AD/"},{"name":"数学","slug":"学霸秘籍/数学","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/%E6%95%B0%E5%AD%A6/"},{"name":"语文","slug":"学霸秘籍/语文","permalink":"http://xinchun.wang/categories/%E5%AD%A6%E9%9C%B8%E7%A7%98%E7%B1%8D/%E8%AF%AD%E6%96%87/"}],"tags":[{"name":"信息学","slug":"信息学","permalink":"http://xinchun.wang/tags/%E4%BF%A1%E6%81%AF%E5%AD%A6/"},{"name":"地理","slug":"地理","permalink":"http://xinchun.wang/tags/%E5%9C%B0%E7%90%86/"},{"name":"历史","slug":"历史","permalink":"http://xinchun.wang/tags/%E5%8E%86%E5%8F%B2/"},{"name":"化学","slug":"化学","permalink":"http://xinchun.wang/tags/%E5%8C%96%E5%AD%A6/"},{"name":"物理","slug":"物理","permalink":"http://xinchun.wang/tags/%E7%89%A9%E7%90%86/"},{"name":"英语","slug":"英语","permalink":"http://xinchun.wang/tags/%E8%8B%B1%E8%AF%AD/"},{"name":"数学","slug":"数学","permalink":"http://xinchun.wang/tags/%E6%95%B0%E5%AD%A6/"},{"name":"语文","slug":"语文","permalink":"http://xinchun.wang/tags/%E8%AF%AD%E6%96%87/"}]}